// This file was generated by gir (https://github.com/gtk-rs/gir @ ffda6f9)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::hash;
use std::mem;
use std::ptr;

glib_wrapper! {
    #[derive(Debug, PartialOrd, Ord)]
    pub struct CollectionRef(Boxed<ffi::OstreeCollectionRef>);

    match fn {
        copy => |ptr| gobject_ffi::g_boxed_copy(ffi::ostree_collection_ref_get_type(), ptr as *mut _) as *mut ffi::OstreeCollectionRef,
        free => |ptr| gobject_ffi::g_boxed_free(ffi::ostree_collection_ref_get_type(), ptr as *mut _),
        get_type => || ffi::ostree_collection_ref_get_type(),
    }
}

impl CollectionRef {
    /// Create a new `CollectionRef` containing (`collection_id`, `ref_name`). If
    /// `collection_id` is `None`, this is equivalent to a plain ref name string (not a
    /// refspec; no remote name is included), which can be used for non-P2P
    /// operations.
    ///
    /// Feature: `v2018_6`
    ///
    /// ## `collection_id`
    /// a collection ID, or `None` for a plain ref
    /// ## `ref_name`
    /// a ref name
    ///
    /// # Returns
    ///
    /// a new `CollectionRef`
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    pub fn new<'a, P: Into<Option<&'a str>>>(collection_id: P, ref_name: &str) -> CollectionRef {
        let collection_id = collection_id.into();
        let collection_id = collection_id.to_glib_none();
        unsafe {
            from_glib_full(ffi::ostree_collection_ref_new(collection_id.0, ref_name.to_glib_none().0))
        }
    }

    /// Create a copy of the given `self`.
    ///
    /// Feature: `v2018_6`
    ///
    ///
    /// # Returns
    ///
    /// a newly allocated copy of `self`
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    pub fn dup(&self) -> Option<CollectionRef> {
        unsafe {
            from_glib_full(ffi::ostree_collection_ref_dup(self.to_glib_none().0))
        }
    }

    /// Copy an array of `OstreeCollectionRefs`, including deep copies of all its
    /// elements. `refs` must be `None`-terminated; it may be empty, but must not be
    /// `None`.
    ///
    /// Feature: `v2018_6`
    ///
    /// ## `refs`
    /// `None`-terminated array of `OstreeCollectionRefs`
    ///
    /// # Returns
    ///
    /// a newly allocated copy of `refs`
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    pub fn dupv(refs: &[&CollectionRef]) -> Vec<CollectionRef> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::ostree_collection_ref_dupv(refs.to_glib_none().0))
        }
    }

    /// Compare `ref1` and `ref2` and return `true` if they have the same collection ID and
    /// ref name, and `false` otherwise. Both `ref1` and `ref2` must be non-`None`.
    ///
    /// Feature: `v2018_6`
    ///
    /// ## `ref1`
    /// an `CollectionRef`
    /// ## `ref2`
    /// another `CollectionRef`
    ///
    /// # Returns
    ///
    /// `true` if `ref1` and `ref2` are equal, `false` otherwise
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    fn equal<'a, P: Into<Option<&'a CollectionRef>>>(&self, ref2: P) -> bool {
        unsafe {
            from_glib(ffi::ostree_collection_ref_equal(ToGlibPtr::<*mut ffi::OstreeCollectionRef>::to_glib_none(self).0 as glib_ffi::gconstpointer, ToGlibPtr::<*mut ffi::OstreeCollectionRef>::to_glib_none(ref2).0 as glib_ffi::gconstpointer))
        }
    }

    /// Free the given array of `refs`, including freeing all its elements. `refs`
    /// must be `None`-terminated; it may be empty, but must not be `None`.
    ///
    /// Feature: `v2018_6`
    ///
    /// ## `refs`
    /// an array of `OstreeCollectionRefs`
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    pub fn freev(refs: &[&CollectionRef]) {
        unsafe {
            ffi::ostree_collection_ref_freev(refs.to_glib_full());
        }
    }

    /// Hash the given `ref_`. This function is suitable for use with `glib::HashTable`.
    /// `ref_` must be non-`None`.
    ///
    /// Feature: `v2018_6`
    ///
    /// ## `ref_`
    /// an `CollectionRef`
    ///
    /// # Returns
    ///
    /// hash value for `ref_`
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    fn hash(&self) -> u32 {
        unsafe {
            ffi::ostree_collection_ref_hash(ToGlibPtr::<*mut ffi::OstreeCollectionRef>::to_glib_none(self).0 as glib_ffi::gconstpointer)
        }
    }
}

impl PartialEq for CollectionRef {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for CollectionRef {}

impl hash::Hash for CollectionRef {
    #[inline]
    fn hash<H>(&self, state: &mut H) where H: hash::Hasher {
        hash::Hash::hash(&self.hash(), state)
    }
}
