// This file was generated by gir (https://github.com/gtk-rs/gir @ ffda6f9)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

#[cfg(any(feature = "v2017_13", feature = "dox"))]
use RepoDevInoCache;
use SePolicy;
use ffi;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct RepoCommitModifier(Shared<ffi::OstreeRepoCommitModifier>);

    match fn {
        ref => |ptr| ffi::ostree_repo_commit_modifier_ref(ptr),
        unref => |ptr| ffi::ostree_repo_commit_modifier_unref(ptr),
        get_type => || ffi::ostree_repo_commit_modifier_get_type(),
    }
}

impl RepoCommitModifier {
    //pub fn new<'a, P: Into<Option<&'a /*Unimplemented*/RepoCommitFilter>>>(flags: /*Ignored*/RepoCommitModifierFlags, commit_filter: P, destroy_notify: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> RepoCommitModifier {
    //    unsafe { TODO: call ffi::ostree_repo_commit_modifier_new() }
    //}

    /// See the documentation for
    /// `ostree_repo_devino_cache_new()`. This function can
    /// then be used for later calls to
    /// `ostree_repo_write_directory_to_mtree()` to optimize commits.
    ///
    /// Note if your process has multiple writers, you should use separate
    /// `OSTreeRepo` instances if you want to also use this API.
    ///
    /// This function will add a reference to `cache` without copying - you
    /// should avoid further mutation of the cache.
    ///
    /// Feature: `v2017_13`
    ///
    /// ## `cache`
    /// A hash table caching device,inode to checksums
    #[cfg(any(feature = "v2017_13", feature = "dox"))]
    pub fn set_devino_cache(&self, cache: &RepoDevInoCache) {
        unsafe {
            ffi::ostree_repo_commit_modifier_set_devino_cache(self.to_glib_none().0, cache.to_glib_none().0);
        }
    }

    /// If `policy` is non-`None`, use it to look up labels to use for
    /// "security.selinux" extended attributes.
    ///
    /// Note that any policy specified this way operates in addition to any
    /// extended attributes provided via
    /// `RepoCommitModifier::set_xattr_callback`. However if both
    /// specify a value for "security.selinux", then the one from the
    /// policy wins.
    /// ## `sepolicy`
    /// Policy to use for labeling
    pub fn set_sepolicy<'a, P: Into<Option<&'a SePolicy>>>(&self, sepolicy: P) {
        let sepolicy = sepolicy.into();
        let sepolicy = sepolicy.to_glib_none();
        unsafe {
            ffi::ostree_repo_commit_modifier_set_sepolicy(self.to_glib_none().0, sepolicy.0);
        }
    }

    //pub fn set_xattr_callback(&self, callback: /*Unknown conversion*//*Unimplemented*/RepoCommitModifierXattrCallback, destroy: /*Unknown conversion*//*Unimplemented*/DestroyNotify) {
    //    unsafe { TODO: call ffi::ostree_repo_commit_modifier_set_xattr_callback() }
    //}
}
