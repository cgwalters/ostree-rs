// This file was generated by gir (https://github.com/gtk-rs/gir @ ffda6f9)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Remote(Shared<ffi::OstreeRemote>);

    match fn {
        ref => |ptr| ffi::ostree_remote_ref(ptr),
        unref => |ptr| ffi::ostree_remote_unref(ptr),
        get_type => || ffi::ostree_remote_get_type(),
    }
}

impl Remote {
    /// Get the human-readable name of the remote. This is what the user configured,
    /// if the remote was explicitly configured; and will otherwise be a stable,
    /// arbitrary, string.
    ///
    /// Feature: `v2018_6`
    ///
    ///
    /// # Returns
    ///
    /// remoteâ€™s name
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    pub fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::ostree_remote_get_name(self.to_glib_none().0))
        }
    }

    /// Get the URL from the remote.
    ///
    /// Feature: `v2018_6`
    ///
    ///
    /// # Returns
    ///
    /// the remote's URL
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    pub fn get_url(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::ostree_remote_get_url(self.to_glib_none().0))
        }
    }
}
