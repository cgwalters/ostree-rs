// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::translate::*;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum ObjectType {
    File,
    DirTree,
    DirMeta,
    Commit,
    TombstoneCommit,
    CommitMeta,
    PayloadLink,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for ObjectType {
    type GlibType = ffi::OstreeObjectType;

    fn to_glib(&self) -> ffi::OstreeObjectType {
        match *self {
            ObjectType::File => ffi::OSTREE_OBJECT_TYPE_FILE,
            ObjectType::DirTree => ffi::OSTREE_OBJECT_TYPE_DIR_TREE,
            ObjectType::DirMeta => ffi::OSTREE_OBJECT_TYPE_DIR_META,
            ObjectType::Commit => ffi::OSTREE_OBJECT_TYPE_COMMIT,
            ObjectType::TombstoneCommit => ffi::OSTREE_OBJECT_TYPE_TOMBSTONE_COMMIT,
            ObjectType::CommitMeta => ffi::OSTREE_OBJECT_TYPE_COMMIT_META,
            ObjectType::PayloadLink => ffi::OSTREE_OBJECT_TYPE_PAYLOAD_LINK,
            ObjectType::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::OstreeObjectType> for ObjectType {
    fn from_glib(value: ffi::OstreeObjectType) -> Self {
        match value {
            1 => ObjectType::File,
            2 => ObjectType::DirTree,
            3 => ObjectType::DirMeta,
            4 => ObjectType::Commit,
            5 => ObjectType::TombstoneCommit,
            6 => ObjectType::CommitMeta,
            7 => ObjectType::PayloadLink,
            value => ObjectType::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum RepoMode {
    Bare,
    Archive,
    BareUser,
    BareUserOnly,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for RepoMode {
    type GlibType = ffi::OstreeRepoMode;

    fn to_glib(&self) -> ffi::OstreeRepoMode {
        match *self {
            RepoMode::Bare => ffi::OSTREE_REPO_MODE_BARE,
            RepoMode::Archive => ffi::OSTREE_REPO_MODE_ARCHIVE,
            RepoMode::BareUser => ffi::OSTREE_REPO_MODE_BARE_USER,
            RepoMode::BareUserOnly => ffi::OSTREE_REPO_MODE_BARE_USER_ONLY,
            RepoMode::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::OstreeRepoMode> for RepoMode {
    fn from_glib(value: ffi::OstreeRepoMode) -> Self {
        match value {
            0 => RepoMode::Bare,
            1 => RepoMode::Archive,
            2 => RepoMode::BareUser,
            3 => RepoMode::BareUserOnly,
            value => RepoMode::__Unknown(value),
        }
    }
}

