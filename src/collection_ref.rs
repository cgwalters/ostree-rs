// Based on a file generated by gir. Changes are marked below.
#[cfg(any(feature = "v2018_6", feature = "dox"))]
use glib::translate::*;
use glib_sys;
use gobject_sys;
use ostree_sys;
use std::hash;

glib_wrapper! {
    #[derive(Debug, PartialOrd, Ord)]
    pub struct CollectionRef(Boxed<ostree_sys::OstreeCollectionRef>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(ostree_sys::ostree_collection_ref_get_type(), ptr as *mut _) as *mut ostree_sys::OstreeCollectionRef,
        free => |ptr| gobject_sys::g_boxed_free(ostree_sys::ostree_collection_ref_get_type(), ptr as *mut _),
        get_type => || ostree_sys::ostree_collection_ref_get_type(),
    }
}

impl CollectionRef {
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    pub fn new(collection_id: Option<&str>, ref_name: &str) -> Option<CollectionRef> {
        unsafe {
            from_glib_full(ostree_sys::ostree_collection_ref_new(
                collection_id.to_glib_none().0,
                ref_name.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    fn equal(&self, ref2: &CollectionRef) -> bool {
        unsafe {
            // CHANGE: both instances of *mut to *const
            from_glib(ostree_sys::ostree_collection_ref_equal(
                ToGlibPtr::<*const ostree_sys::OstreeCollectionRef>::to_glib_none(self).0
                    as glib_sys::gconstpointer,
                ToGlibPtr::<*const ostree_sys::OstreeCollectionRef>::to_glib_none(ref2).0
                    as glib_sys::gconstpointer,
            ))
        }
    }

    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    fn hash(&self) -> u32 {
        unsafe {
            // CHANGE: *mut to *const
            ostree_sys::ostree_collection_ref_hash(
                ToGlibPtr::<*const ostree_sys::OstreeCollectionRef>::to_glib_none(self).0
                    as glib_sys::gconstpointer,
            )
        }
    }
}

impl PartialEq for CollectionRef {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for CollectionRef {}

impl hash::Hash for CollectionRef {
    #[inline]
    fn hash<H>(&self, state: &mut H)
    where
        H: hash::Hasher,
    {
        hash::Hash::hash(&self.hash(), state)
    }
}
