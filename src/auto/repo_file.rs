// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Error;
use Repo;
use ffi;
use gio;
use gio_ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct RepoFile(Object<ffi::OstreeRepoFile, ffi::OstreeRepoFileClass>): [
        gio::File => gio_ffi::GFile,
    ];

    match fn {
        get_type => || ffi::ostree_repo_file_get_type(),
    }
}

pub trait RepoFileExt {
    fn ensure_resolved(&self) -> Result<(), Error>;

    fn get_checksum(&self) -> Option<String>;

    fn get_repo(&self) -> Option<Repo>;

    fn get_root(&self) -> Option<RepoFile>;

    fn get_xattrs<'a, P: Into<Option<&'a gio::Cancellable>>>(&self, cancellable: P) -> Result<glib::Variant, Error>;

    fn tree_find_child(&self, name: &str) -> (i32, bool, glib::Variant);

    fn tree_get_contents(&self) -> Option<glib::Variant>;

    fn tree_get_contents_checksum(&self) -> Option<String>;

    fn tree_get_metadata(&self) -> Option<glib::Variant>;

    fn tree_get_metadata_checksum(&self) -> Option<String>;

    fn tree_query_child<'a, P: Into<Option<&'a gio::Cancellable>>>(&self, n: i32, attributes: &str, flags: gio::FileQueryInfoFlags, cancellable: P) -> Result<gio::FileInfo, Error>;

    fn tree_set_metadata(&self, checksum: &str, metadata: &glib::Variant);
}

impl<O: IsA<RepoFile>> RepoFileExt for O {
    fn ensure_resolved(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::ostree_repo_file_ensure_resolved(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_checksum(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::ostree_repo_file_get_checksum(self.to_glib_none().0))
        }
    }

    fn get_repo(&self) -> Option<Repo> {
        unsafe {
            from_glib_none(ffi::ostree_repo_file_get_repo(self.to_glib_none().0))
        }
    }

    fn get_root(&self) -> Option<RepoFile> {
        unsafe {
            from_glib_none(ffi::ostree_repo_file_get_root(self.to_glib_none().0))
        }
    }

    fn get_xattrs<'a, P: Into<Option<&'a gio::Cancellable>>>(&self, cancellable: P) -> Result<glib::Variant, Error> {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut out_xattrs = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = ffi::ostree_repo_file_get_xattrs(self.to_glib_none().0, &mut out_xattrs, cancellable.0, &mut error);
            if error.is_null() { Ok(from_glib_full(out_xattrs)) } else { Err(from_glib_full(error)) }
        }
    }

    fn tree_find_child(&self, name: &str) -> (i32, bool, glib::Variant) {
        unsafe {
            let mut is_dir = mem::uninitialized();
            let mut out_container = ptr::null_mut();
            let ret = ffi::ostree_repo_file_tree_find_child(self.to_glib_none().0, name.to_glib_none().0, &mut is_dir, &mut out_container);
            (ret, from_glib(is_dir), from_glib_full(out_container))
        }
    }

    fn tree_get_contents(&self) -> Option<glib::Variant> {
        unsafe {
            from_glib_full(ffi::ostree_repo_file_tree_get_contents(self.to_glib_none().0))
        }
    }

    fn tree_get_contents_checksum(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::ostree_repo_file_tree_get_contents_checksum(self.to_glib_none().0))
        }
    }

    fn tree_get_metadata(&self) -> Option<glib::Variant> {
        unsafe {
            from_glib_full(ffi::ostree_repo_file_tree_get_metadata(self.to_glib_none().0))
        }
    }

    fn tree_get_metadata_checksum(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::ostree_repo_file_tree_get_metadata_checksum(self.to_glib_none().0))
        }
    }

    fn tree_query_child<'a, P: Into<Option<&'a gio::Cancellable>>>(&self, n: i32, attributes: &str, flags: gio::FileQueryInfoFlags, cancellable: P) -> Result<gio::FileInfo, Error> {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut out_info = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = ffi::ostree_repo_file_tree_query_child(self.to_glib_none().0, n, attributes.to_glib_none().0, flags.to_glib(), &mut out_info, cancellable.0, &mut error);
            if error.is_null() { Ok(from_glib_full(out_info)) } else { Err(from_glib_full(error)) }
        }
    }

    fn tree_set_metadata(&self, checksum: &str, metadata: &glib::Variant) {
        unsafe {
            ffi::ostree_repo_file_tree_set_metadata(self.to_glib_none().0, checksum.to_glib_none().0, metadata.to_glib_none().0);
        }
    }
}
