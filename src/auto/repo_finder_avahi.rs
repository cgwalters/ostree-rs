// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2018_6", feature = "dox"))]
use glib;
use glib::object::IsA;
use glib::translate::*;
use ostree_sys;
use std::fmt;
#[cfg(any(feature = "v2018_6", feature = "dox"))]
use std::ptr;
use RepoFinder;

glib_wrapper! {
    pub struct RepoFinderAvahi(Object<ostree_sys::OstreeRepoFinderAvahi, ostree_sys::OstreeRepoFinderAvahiClass, RepoFinderAvahiClass>) @implements RepoFinder;

    match fn {
        get_type => || ostree_sys::ostree_repo_finder_avahi_get_type(),
    }
}

impl RepoFinderAvahi {
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    pub fn new(context: Option<&glib::MainContext>) -> RepoFinderAvahi {
        unsafe {
            from_glib_full(ostree_sys::ostree_repo_finder_avahi_new(context.to_glib_none().0))
        }
    }
}

pub const NONE_REPO_FINDER_AVAHI: Option<&RepoFinderAvahi> = None;

pub trait RepoFinderAvahiExt: 'static {
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    fn start(&self) -> Result<(), glib::Error>;

    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    fn stop(&self);
}

impl<O: IsA<RepoFinderAvahi>> RepoFinderAvahiExt for O {
    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    fn start(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ostree_sys::ostree_repo_finder_avahi_start(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(any(feature = "v2018_6", feature = "dox"))]
    fn stop(&self) {
        unsafe {
            ostree_sys::ostree_repo_finder_avahi_stop(self.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for RepoFinderAvahi {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RepoFinderAvahi")
    }
}
